import { decodeFirst, decodeFirstSync, encode } from 'cbor';

/**
 * Data provided by the authenticator about the environment in which the
 * authentication took place in
 *
 * @property {string} rpIDHash base64-encoded SHA256 hash of the RP ID used during authentication
 * @property {AuthenticatorDataFlags} flags Bitfield of flags representing the user and registration
 * @property {number} useCount Number of times the credential was used
 * @property {AttestedCredentialData} attestedCredentialData The credential created during registration, if applicable
 */
type AuthenticatorData = {
  rpIDHash: string
  flags: AuthenticatorDataFlags
  useCount: number
  attestedCredentialData?: AttestedCredentialData
}

/**
 * Information about a credential
 *
 * @property {Buffer} authenticatorGuid A 128-bit identifier indicating the type and make of the authenticator
 * @property {string} credentialID The ID of this credential
 * @property {Buffer} credentialPubKey The public key generated by the authenticator
 */
type AttestedCredentialData = {
  authenticatorGuid: Buffer
  credentialID: string
  credentialPubKey: Buffer
}

enum AuthenticatorDataFlags {
  none,
  userPresent = 1 << 0,
  userVerified = 1 << 2,
  backupEligible = 1 << 3,
  backupState = 1 << 4,
  attestedCredIncluded = 1 << 6,
  extensionDataIncluded = 1 << 7
}

/**
 * Parse the encoded attestation data into usable data
 *
 * Based on https://w3c.github.io/webauthn/#attestation-object
 * @param bytes Buffer of encoded attestation data
 * @return An object representing various pieces of data in of the attestation data
 * @throws {Error} If the attestation data was invalid
 */
const parseAuthData = async (bytes: Buffer): Promise<AuthenticatorData> => {
  /*
    Don't bother parsing if there aren't enough bytes for at least:
     - rpIdHash (32 bytes)
     - flags (1 byte)
     - signCount (4 bytes)
   */
  if (bytes.byteLength < 37) throw new Error(
    `Received ${bytes.length} bytes but at least 37 are required to parse auth data`
  )

  let pt = 0; // Decoding pointer

  const rpIdHash = bytes.subarray(pt, (pt += 32)).toString('base64');

  const flagsInt = bytes.subarray(pt, (pt += 1))[0];

  // Bit positions can be referenced here:
  // https://www.w3.org/TR/webauthn-2/#flags
  const flags = {
    up: !!(flagsInt & (1 << 0)), // User Presence
    uv: !!(flagsInt & (1 << 2)), // User Verified
    be: !!(flagsInt & (1 << 3)), // Backup Eligibility
    bs: !!(flagsInt & (1 << 4)), // Backup State
    at: !!(flagsInt & (1 << 6)), // Attested Credential Data Present
    ed: !!(flagsInt & (1 << 7)), // Extension Data Present
    flagsInt,
  };

  const counter = bytes.subarray(pt, (pt += 4)).readUInt32BE();

  let authData: AuthenticatorData = {
    rpIDHash: rpIdHash,
    flags: flagsInt,
    useCount: counter
  }

  if (flags.at) {
    const aGuid = bytes.subarray(pt, (pt += 16));

    const credIDLen = bytes.subarray(pt, (pt += 2)).readUInt16BE();
    const credentialID = bytes.subarray(pt, (pt += credIDLen)).toString('base64');

    // Credential public key encoded in CBOR!
    // Decode the next CBOR item in the buffer, then re-encode it back to a Buffer to find the length of the CBOR-encoded public key
    const firstDecoded = decodeFirstSync(bytes.subarray(pt));
    const firstEncoded = Buffer.from(encode(firstDecoded) as ArrayBuffer);
    pt += firstEncoded.byteLength;

    authData.attestedCredentialData = {
      authenticatorGuid: aGuid,
      credentialID: credentialID,
      credentialPubKey: firstEncoded
    }
  }

  // Extensions: to be implemented if and when extensions are useful
  if (flags.ed) {
    const firstDecoded = decodeFirst(bytes.subarray(pt));
    const firstEncoded = Buffer.from(encode(firstDecoded) as ArrayBuffer);
   // extensionsData = decodeAuthenticatorExtensions(extensionsDataBuffer);
    pt += firstEncoded.byteLength;
  }

  // Pointer should be at the end of the authenticator data, otherwise too much data was sent
  if (bytes.byteLength > pt) throw new Error('Erroneous bytes present after decoding complete');

  return authData
}

export default parseAuthData